/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package TEST_EXEMPLE;

import SOURCES.CallBack.EcouteurTresorerie;
import SOURCES.Interface.InterfaceCharge;
import SOURCES.Interface.InterfaceDecaissement;
import SOURCES.Interface.InterfaceEncaissement;
import SOURCES.Interface.InterfaceMonnaie;
import SOURCES.Interface.InterfaceRevenu;
import SOURCES.UI.Panel;
import SOURCES.Utilitaires.DonneesTresorerie;
import SOURCES.Utilitaires.ParametreTresorerie;
import SOURCES.Utilitaires.SortiesTresorerie;
import SOURCES.Utilitaires.Util;
import static java.lang.Thread.sleep;
import java.util.Date;
import java.util.Vector;

/**
 *
 * @author HP Pavilion
 */
public class TEST_Principal extends javax.swing.JFrame {

    /**
     * Creates new form TEST_Principal
     */
    public Panel gestionnaireTresorerie = null;
    public ParametreTresorerie parametreTresorerie = null;
    public DonneesTresorerie donneesTresorerie = null;
    public int idUtilisateur = 1;
    public String nomUtilisateur = "Serge SULA BOSIO";
    public int idMonnaie = 1;
    public String monnaie = "$";

    public TEST_Entreprise entreprise = new TEST_Entreprise(1, "ECOLE CARESIENNE DE KINSHASA", "7e Rue Limeté Industrielle, Kinshasa/RDC", "+243844803514", "infos@cartesien.org", "wwww.cartesien.org", "Equity Bank Congo SA", "Cartesien de Kinshasa", "00122114557892554", "IBN0012455", "CDKIN0012", "logo.png", "RCCM/KD/CD/4513", "IDN00111454", "IMP00124100");
    public TEST_Exercice exercice = new TEST_Exercice(12, entreprise.getId(), idUtilisateur, nomUtilisateur, new Date(), Util.getDate_AjouterAnnee(new Date(), 1), InterfaceDecaissement.BETA_EXISTANT);
    public TEST_Monnaie defaultMonnaie = new TEST_Monnaie(idMonnaie, entreprise.getId(), idUtilisateur, exercice.getId(), "Dollars Américains", monnaie, 1, 1620, new Date().getTime(), InterfaceEncaissement.BETA_EXISTANT);

    public TEST_Principal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        tabPrincipal = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Ouvrir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addContainerGap(622, Short.MAX_VALUE))
            .addComponent(tabPrincipal)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        ouvrir();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TEST_Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TEST_Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TEST_Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TEST_Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TEST_Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JTabbedPane tabPrincipal;
    // End of variables declaration//GEN-END:variables

    private void ouvrir() {
        gestionnaireTresorerie = getGestionnaireTresorerie();
        //Chargement du gestionnaire sur l'onglet
        tabPrincipal.addTab("Tresorerie (Encaissements & Decaissements)", gestionnaireTresorerie);

        //On séléctionne l'onglet actuel
        tabPrincipal.setSelectedComponent(gestionnaireTresorerie);
    }

    private Panel getGestionnaireTresorerie() {
        return new Panel(tabPrincipal, getDonnees(), getParametres(), new EcouteurTresorerie() {
            @Override
            public void onEnregistre(SortiesTresorerie sortiesTresorerie) {
                //Ce que le système devra faire lorsque l'on clique sur le bouton ENREGISTRER

                Thread th = new Thread() {
                    @Override
                    public void run() {
                        try {
                            sortiesTresorerie.getEcouteurEnregistrement().onUploading("Chargement...");
                            sleep(10);

                            sortiesTresorerie.getListeEncaissements().forEach((Oeleve) -> {
                                if (Oeleve.getBeta() == InterfaceEncaissement.BETA_MODIFIE || Oeleve.getBeta() == InterfaceEncaissement.BETA_NOUVEAU) {
                                    System.out.println(" * " + Oeleve.toString());

                                    //Après enregistrement
                                    Oeleve.setBeta(InterfaceEncaissement.BETA_EXISTANT);
                                }
                            });

                            sortiesTresorerie.getListeDecaissements().forEach((Oeleve) -> {
                                if (Oeleve.getBeta() == InterfaceDecaissement.BETA_MODIFIE || Oeleve.getBeta() == InterfaceDecaissement.BETA_NOUVEAU) {
                                    System.out.println(" * " + Oeleve.toString() + " : ");

                                    //Après enregistrement
                                    Oeleve.setBeta(InterfaceDecaissement.BETA_EXISTANT);
                                }
                            });

                            sortiesTresorerie.getEcouteurEnregistrement().onDone("Enregistré!");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                };
                th.start();

            }
        });
    }

    private DonneesTresorerie getDonnees() {
        Vector<InterfaceEncaissement> listeEncaissements = new Vector<>();
        listeEncaissements.addElement(new TEST_Encaissement(1, InterfaceEncaissement.DESTINATION_BANQUE, "0014578BN", new Date(), 100, defaultMonnaie.getId(), defaultMonnaie.getCode(), nomUtilisateur, "Loyer restaut YZ", 2, "Loyer restau", InterfaceRevenu.BETA_EXISTANT));

        Vector<InterfaceDecaissement> listeDecaissements = new Vector<>();
        listeDecaissements.addElement(new TEST_Decaissement(1, InterfaceDecaissement.SOURCE_BANQUE, "B0014578O", new Date(), 100, defaultMonnaie.getId(), defaultMonnaie.getCode(), nomUtilisateur, "Autres", 2, "Loyer restau", InterfaceRevenu.BETA_EXISTANT));

        this.donneesTresorerie = new DonneesTresorerie(listeEncaissements, listeDecaissements);
        return this.donneesTresorerie;
    }

    private ParametreTresorerie getParametres() {
        //Les types des monnaies
        Vector<InterfaceMonnaie> monnaies = new Vector<>();
        monnaies.addElement(defaultMonnaie);
        monnaies.addElement(new TEST_Monnaie(2, entreprise.getId(), idUtilisateur, exercice.getId(), "Francs congolais", "Fc", 1, 1, new Date().getTime() + 1, InterfaceEncaissement.BETA_EXISTANT));
        monnaies.addElement(new TEST_Monnaie(3, entreprise.getId(), idUtilisateur, exercice.getId(), "Euro", "E", 1, 1, new Date().getTime() + 1, InterfaceEncaissement.BETA_EXISTANT));

        //Les types des revenus
        Vector<InterfaceRevenu> revenus = new Vector<>();
        revenus.addElement(new TEST_Revenu(1, entreprise.getId(), idUtilisateur, exercice.getId(), defaultMonnaie.getId(), defaultMonnaie.getSignature(), "FRAIS SCOLAIRES", defaultMonnaie.getCode(), 100000, InterfaceEncaissement.BETA_EXISTANT));
        revenus.addElement(new TEST_Revenu(2, entreprise.getId(), idUtilisateur, exercice.getId(), defaultMonnaie.getId(), defaultMonnaie.getSignature(), "LOYERS RESTAURANT", defaultMonnaie.getCode(), 10000, InterfaceEncaissement.BETA_EXISTANT));

        //Les types des charges
        Vector<InterfaceCharge> charges = new Vector<>();
        charges.addElement(new TEST_Charge(1, entreprise.getId(), idUtilisateur, exercice.getId(), "SALAIRE STAFF", 50000, defaultMonnaie.getId(), defaultMonnaie.getSignature(), defaultMonnaie.getCode(), InterfaceEncaissement.BETA_EXISTANT));
        charges.addElement(new TEST_Charge(2, entreprise.getId(), idUtilisateur, exercice.getId(), "ENERGIE", 50000, defaultMonnaie.getId(), defaultMonnaie.getSignature(), defaultMonnaie.getCode(), InterfaceEncaissement.BETA_EXISTANT));
        charges.addElement(new TEST_Charge(3, entreprise.getId(), idUtilisateur, exercice.getId(), "TRANSPORT", 50000, defaultMonnaie.getId(), defaultMonnaie.getSignature(), defaultMonnaie.getCode(), InterfaceEncaissement.BETA_EXISTANT));

        this.parametreTresorerie = new ParametreTresorerie(entreprise, exercice, monnaies, revenus, charges, nomUtilisateur, idUtilisateur);
        return this.parametreTresorerie;
    }
}
