/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SOURCES.UI;


import SOURCES.Interface.InterfaceDecaissement;
import java.awt.Color;
import java.awt.Font;
import javax.swing.ImageIcon;

/**
 *
 * @author user
 */
public class CelluleSimpleTableau extends javax.swing.JPanel {

    private ImageIcon iconeEdition;
    public static int ALIGNE_GAUCHE = 0;
    public static int ALIGNE_CENTRE = 1;
    public static int ALIGNE_DROITE = 2;
    public static final Color COULEUR_ROUGE_SELECTION = new Color(255, 121, 121);
    public static final Color COULEUR_ROUGE_SIMPLE = new Color(192, 0, 0);
    public static final Color COULEUR_BLEU_SELECTION = new Color(139, 205, 255);
    public static final Color COULEUR_BLEU_SIMPLE = new Color(11, 88, 237);
    public static final Color COULEUR_CELLULE_SELECTIONNEE = new java.awt.Color(255, 255, 51);

    /**
     * Creates new form PanValeurTable
     */
    public CelluleSimpleTableau(String val, int alignement, ImageIcon iconeEdition) {
        initComponents();
        this.iconeEdition = iconeEdition;
        setValeur(val);
        if (alignement == ALIGNE_DROITE) {
            labvaleur.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        } else if (alignement == ALIGNE_CENTRE) {
            labvaleur.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        } else {
            labvaleur.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        }
        labvaleur.setIcon(this.iconeEdition);
    }

    private void ecouterLigneImpaire(int row) {
        if ((row % 2) == 0) {
            this.setBackground(Color.WHITE);
        } else {
            this.setBackground(Color.lightGray);
        }
    }

    public void ecouterSelection(boolean isSelected, int row, int beta, boolean hasFocus) {
        appliqerCouleurSelection(isSelected, row);
        appliquerCouleurBeta(isSelected, beta);
        appliquerCouleurFocusBordureCellule(hasFocus);
    }
    
    public void appliquerCouleurFocusBordureCellule(boolean hasFocus){
        if(hasFocus == true){
            this.setBorder(javax.swing.BorderFactory.createLineBorder(COULEUR_CELLULE_SELECTIONNEE, 2));
        }else{
            this.setBorder(null);
        }
    }

    private void appliqerCouleurSelection(boolean isSelected, int row) {
        if (isSelected == true) {
            labvaleur.setFont(new java.awt.Font("Tahoma", Font.BOLD, 11));
            this.setBackground(Color.BLACK);
        } else {
            labvaleur.setFont(new java.awt.Font("Tahoma", Font.PLAIN, 11));
            ecouterLigneImpaire(row);
        }
    }

    private void appliquerCouleurBeta(boolean isSelected, int beta) {
        switch (beta) {
            case InterfaceDecaissement.BETA_EXISTANT:
                if (isSelected == true) {
                    labvaleur.setForeground(Color.WHITE);
                } else {
                    labvaleur.setForeground(Color.BLACK);
                }
                break;
            case InterfaceDecaissement.BETA_MODIFIE:
                if (isSelected == true) {
                    labvaleur.setForeground(COULEUR_BLEU_SELECTION);
                } else {
                    labvaleur.setForeground(COULEUR_BLEU_SIMPLE);
                }
                break;
            case InterfaceDecaissement.BETA_NOUVEAU:
                if (isSelected == true) {
                    labvaleur.setForeground(COULEUR_ROUGE_SELECTION);
                } else {
                    labvaleur.setForeground(COULEUR_ROUGE_SIMPLE);
                }
                break;
            default:
                break;
        }
    }

    public void setValeur(String val) {
        this.labvaleur.setText(val);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labvaleur = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        labvaleur.setBackground(new java.awt.Color(255, 255, 255));
        labvaleur.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        labvaleur.setText("2000.15 $");
        labvaleur.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labvaleur, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labvaleur, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel labvaleur;
    // End of variables declaration//GEN-END:variables
}
